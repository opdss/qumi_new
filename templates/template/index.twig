{% extends 'console.twig' %}

{% block console %}

    <!-- content start -->
    <div class="site-content">
        <!--<h1 class="site-h1">域名管理</h1>-->

        <!-- 数据查询条件 start -->
        <form class="layui-form">
            <div class="layui-form-item">
                <div class="layui-inline">
                    <div class="layui-input-inline">
                        <input type="text" name="kw" class="layui-input" placeholder="关键词">
                    </div>
                    <div class="layui-input-inline">
                        <button class="layui-btn"  lay-filter="btnSearch" lay-submit>查询</button>
                        <button class="layui-btn layui-btn-normal" id="btnAdd">添加域名</button>
                    </div>
                </div>
            </div>
        </form>
        <!-- 数据查询条件 end -->

        <!-- 数据表格 start -->
        <script type="text/html" id="headerToolBar">
            <div class="layui-btn-container">
                <button class="layui-btn layui-btn-sm" lay-event="batchDel">批量删除</button>
            </div>
        </script>
        <table class="layui-hide" id="dataTable" lay-filter="dataTable"></table>
        <script type="text/html" id="toolBar">
            <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
        </script>
        <!-- 数据表格 end -->
    </div>
    <!-- content end -->
{% endblock %}

{% block script %}
    <script type="text/javascript">
        layui.use(['layer', 'element', 'form', 'table', 'utils'], function(){
            var layer = layui.layer;
            var form = layui.form;
            var table = layui.table;
            var utils = layui.utils;

            table.render(layui.$.extend({
                elem: '#dataTable'
                ,url:'{{ path_for('api.template.get') }}'
                ,toolbar : '#headerToolBar'
                ,cols: [[
                    {type:'checkbox'}
                    ,{field:'name',  title: '模版名称', sort: true, edit:'text'}
                    ,{field:'qq', title: 'QQ', sort: true, edit:'text'}
                    ,{field:'phone', title: '联系电话', sort: true, edit:'text'}
                    ,{field:'wechat', title: '微信', sort: true, edit:'text'}
                    ,{field:'email', title: '邮箱', sort: true, edit:'text'}
                    ,{field:'domainCount', title: '停靠域名数量'}
                    ,{fixed:'right', title: '操作', align:'center', toolbar : '#toolBar' }
                ]]
            },utils.tableOptions));

            //监听查询条件
            form.on('submit(btnSearch)', function (data) {
                table.reload('dataTable', {
                    //重新从第 1 页开始
                    page: {curr: 1}
                    ,where: data.field
                });
                return false;
            });

            //监听排序
            table.on('sort(dataTable)', function(obj){ //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                //尽管我们的 table 自带排序功能，但并没有请求服务端。
                //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
                table.reload('dataTable', {
                    initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。 layui 2.1.1 新增参数
                    ,where: {'order_name' : obj.field, 'order_type':obj.type}
                });
            });

            //头工具栏事件
            table.on('toolbar(dataTable)', function(obj){
                var checkStatus = table.checkStatus(obj.config.id);
                switch(obj.event){
                    case 'batchEdit':
                        var data = checkStatus.data;
                        layer.alert(JSON.stringify(data));
                        break;
                    case 'batchDel':
                        var data = checkStatus.data;
                        layer.msg('选中了：'+ data.length + ' 个');
                        break;
                    case 'batchDnsCheck':
                        layer.msg(checkStatus.isAll ? '全选': '未全选');
                        break;
                };
            });
            //监听单元格
            table.on('edit(dataTable)', function(obj){
                var value = obj.value //得到修改后的值
                    ,data = obj.data //得到所在行所有键值
                    ,field = obj.field; //得到字段
                var _data = {id: data.id}
                _data[field] = value;
                console.log(_data);
                console.log(data);
                console.log(obj);
                utils.ajax.post('{{ path_for('api.template.update') }}',_data, function (res) {
                    //同步更新表格和缓存对应的值
                    obj.update(_data);
                    layer.msg('修改成功！')
                });
            });
            //监听行工具条
            table.on('tool(dataTable)', function(obj){ //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                var data = obj.data; //获得当前行数据
                var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
                var tr = obj.tr; //获得当前行 tr 的DOM对象

                if(layEvent === 'del'){ //删除
                    utils.delById(API.del, data.id, function (res) {
                        obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
                    })
                    layer.confirm('确定删除改数据吗？', function(index){
                        //向服务端发送删除指令
                        layui.$.ajax({
                            method:'delete',
                            url : '/proxy.php?api=/api/domain&id=' + data.id,
                            success : function (res) {
                                if (res.errCode == 0) {
                                    obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
                                    layer.close(index);
                                } else {
                                    layer.msg(res.errMsg);
                                }
                            },
                            dataType : 'json'
                        });
                    });
                } else if(layEvent === 'edit'){ //编辑
                    //do something

                    //同步更新缓存对应的值
                    /*obj.update({
                     username: '123'
                     ,title: 'xxx'
                     });*/
                }
                /*var evt = layEvent.split('.');
                if (evt.length == 2 && evt[0] == 'edit') {
                    //这里一般是发送修改的Ajax请求
                    var _data = {id:data.id}
                    _data[evt[1]] = _data[evt[1]]
                    utils.ajax.post('{{ path_for('api.template.update') }}',_data, function (res) {
                        //同步更新表格和缓存对应的值
                        obj.update(_data);
                        layer.msg('修改成功！')
                    });
                }*/
            });

            layui.$('#btnAdd').on('click', function () {
                layer.msg('添加新域名');
                return false;
            })
        });
    </script>
{% endblock %}